#Code for question(a)
# Load necessary libraries
library(ggplot2)

# Read the data
data <- read.table("C:/Users/zhang/OneDrive/Desktop/uscovid22.txt", header=FALSE, col.names = c("Date", "Cases"))

# Convert 'Date' column to Date format
data$Date <- as.Date(data$Date, format="%Y-%m-%d")

# Apply log transformation (adding a small constant to avoid log(0) issues)
data$Log_Cases <- log(data$Cases + 1e-6)

# Plot original data
p1 <- ggplot(data, aes(x=Date, y=Cases)) +
  geom_line(color="blue") +
  labs(title="Original COVID-19 Cases", x="Date", y="Cases (millions)") +
  theme_minimal()

# Plot log-transformed data
p2 <- ggplot(data, aes(x=Date, y=Log_Cases)) +
  geom_line(color="red") +
  labs(title="Log Transformed COVID-19 Cases", x="Date", y="Log(Cases)") +
  theme_minimal()

#plot the plot1 and plot2
print(p1)
print(p2)



#Code for question(b)
# Load required library
library(zoo)

# Read the data
data <- read.table("C:/Users/zhang/OneDrive/Desktop/uscovid22.txt", header = FALSE)
colnames(data) <- c("Date", "Cases")

# Convert Date to Date type
data$Date <- as.Date(data$Date, format="%Y-%m-%d")

# Take log transformation (Adding a small value to avoid log(0))
data$LogCases <- log(data$Cases + 1e-6)

# Compute 7-day moving average using a centered filter
data$LogCases_MA7 <- rollmean(data$LogCases, k = 7, fill = NA, align = "center")

# Plot the log-transformed series
plot(data$Date, data$LogCases, type = "o", col = "black", pch = 16,
     xlab = "Date", ylab = "Log(Daily Cases)", main = "Log-transformed COVID Cases with 7-day Moving Average")

# Add the moving average trend
lines(data$Date, data$LogCases_MA7, col = "blue", lwd = 2)

# Add a legend
legend("topright", legend = c("Log Cases", "7-day Moving Avg"), 
       col = c("black", "blue"), lty = c(1, 1), pch = c(16, NA), lwd = c(1, 2))



#Code for question(c)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(zoo)

# Read the data
data <- read.table("C:/Users/zhang/OneDrive/Desktop/uscovid22.txt", header=FALSE, col.names = c("Date", "Cases"))

# Convert 'Date' to Date format
data$Date <- as.Date(data$Date, format="%Y-%m-%d")

# Apply log transformation (adding a small constant to avoid log(0))
data$Log_Cases <- log(data$Cases + 1e-6)

# Compute 7-day moving average (Trend Component)
data$Moving_Avg <- zoo::rollmean(data$Log_Cases, k=7, fill=NA, align="right")

# Compute the de-trended series
data$De_trended <- data$Log_Cases - data$Moving_Avg

# Plot the de-trended series
ggplot(data, aes(x=Date, y=De_trended)) +
  geom_line(color="blue", size=1) +
  labs(title="De-Trended COVID-19 Cases (Log Scale)", x="Date", y=expression(tilde(x)[t])) +
  theme_minimal()



#Code for question(d)
# Load necessary libraries
library(zoo)

# Read the data
data <- read.table("C:/Users/zhang/OneDrive/Desktop/uscovid22.txt", header = FALSE)
colnames(data) <- c("Date", "Cases")

# Convert Date column to Date format
data$Date <- as.Date(data$Date, format="%Y-%m-%d")

# Take log transformation (avoid log(0) by adding a small value)
data$LogCases <- log(data$Cases + 1e-6)

# Compute 7-day moving average as trend estimate
data$Trend <- rollmean(data$LogCases, k = 7, fill = NA, align = "center")

# Compute de-trended series (x_tilde)
data$X_tilde <- data$LogCases - data$Trend

# Estimate seasonal components (assuming weekly seasonality)
season_length <- 7  # Weekly seasonality
seasonal_effects <- rep(0, season_length)

# Compute mean seasonal effect for each day of the week
for (i in 1:season_length) {
  seasonal_effects[i] <- mean(data$X_tilde[seq(i, nrow(data), by = season_length)], na.rm = TRUE)
}

# Normalize seasonal effects to sum to zero
seasonal_effects <- seasonal_effects - mean(seasonal_effects)

# Create a seasonal component series aligned with data
data$Seasonal <- rep(seasonal_effects, length.out = nrow(data))

# Compute de-seasoned series (x_t - s_t)
data$Deseasoned <- data$LogCases - data$Seasonal

# Re-estimate trend using moving average on de-seasoned series
data$ReTrend <- rollmean(data$Deseasoned, k = 7, fill = NA, align = "center")

# Compute final reconstructed series (m_t + s_t)
data$Reconstructed <- data$ReTrend + data$Seasonal

# Plot the original log-transformed series and the reconstructed series
plot(data$Date, data$LogCases, type = "o", col = "black", pch = 16,
     xlab = "Date", ylab = "Log(Daily Cases)", main = "Reconstructed Trend + Seasonal Components")

# Overlay reconstructed series
lines(data$Date, data$Reconstructed, col = "blue", lwd = 2)

# Add legend
legend("topright", legend = c("Original Log Cases", "Reconstructed (Trend + Seasonality)"), 
       col = c("black", "blue"), lty = c(1, 1), pch = c(16, NA), lwd = c(1, 2))


#Code for question(d) to (h)
# Load necessary libraries
library(zoo)
library(ggplot2)
library(tseries)

# Compute the residual series (de-trended and de-seasoned)
data$Residuals <- data$LogCases - data$Seasonal - data$ReTrend

# Plot the residual series
plot(data$Date, data$Residuals, type = "o", col = "red", pch = 16,
     xlab = "Date", ylab = "Residuals", main = "Residual Series (De-trended & De-seasoned)")

# Remove NA values from Residuals
residuals_clean <- na.omit(data$Residuals)

# Compute and plot ACF
acf(residuals_clean, main = "ACF of Residuals")

# Remove NA values from Residuals
residuals_clean <- na.omit(data$Residuals)

# Compute ACF without plotting
acf_values <- acf(residuals_clean, plot = FALSE)$acf


# Test if rho_1 is significantly different from 0
rho1 <- acf_values[2]  # First lag autocorrelation
n <- length(data$Residuals)  # Sample size

# Compute standard error of rho1
se_rho1 <- 1 / sqrt(n)

# Compute test statistic (t-test)
t_stat <- rho1 / se_rho1

# Compute p-value (two-tailed test)
p_value <- 2 * (1 - pnorm(abs(t_stat)))

# Print results
cat("First-lag autocorrelation (rho1):", rho1, "\n")
cat("Test statistic:", t_stat, "\n")
cat("P-value:", p_value, "\n")

# Check significance at 0.05 level
if (p_value < 0.05) {
  cat("Reject H0: There is significant autocorrelation at lag 1.\n")
} else {
  cat("Fail to reject H0: No significant autocorrelation at lag 1.\n")
}


# Determine suitable number of lags (approx sqrt(n))
num_lags <- floor(sqrt(n))

# Perform Ljung-Box test
ljung_box_test <- Box.test(data$Residuals, lag = num_lags, type = "Ljung-Box")

# Print results
cat("Ljung-Box Test Results:\n")
cat("Test Statistic:", ljung_box_test$statistic, "\n")
cat("P-value:", ljung_box_test$p.value, "\n")

# Check significance at 0.05 level
if (ljung_box_test$p.value < 0.05) {
  cat("Reject H0: Residuals have significant autocorrelation.\n")
} else {
  cat("Fail to reject H0: Residuals resemble white noise.\n")
}
